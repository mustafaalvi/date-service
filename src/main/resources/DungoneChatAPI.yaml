openapi: 3.0.0
info:
  title: DungeonChatAPI
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /api/chat:
    post:
      summary: Proxies chat requests to OpenAI API.
      operationId: chatWithOpenAI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequestVO'
      responses:
        '200':
          description: Successful response from OpenAI.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  object:
                    type: string
                  created:
                    type: integer
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: object
                          properties:
                            role:
                              type: string
                            content:
                              type: string
                          example:
                            role: assistant
                            content: "Bards are versatile and great for role-playing!"
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized. Ensure your OpenAI API key is correct.
        '500':
          description: Internal Server Error.
      security:
        - api_key: []
  /userProfiles:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /usersProfiles/{userId}:
    get:
      summary: Returns a user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 4
                  name:
                    type: string
                    example: Jessica Smith
        '400':
          description: The specified user ID is invalid (not a number).
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
components:
  schemas:
    ChatMessageVO:
      type: object
      properties:
        role:
          type: string
          description: Role of the message sender (e.g., "user", "assistant", "system").
          example: user
        content:
          type: string
          description: Content of the message.
          example: "Hello! What do you think of bards in D&D?"
      required:
        - role
        - content

    ChatRequestVO:
      type: object
      properties:
        model:
          type: string
          description: Model name to use for OpenAI API.
          example: gpt-4
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessageVO'
      required:
        - model
        - messages

  securitySchemes:
    api_key:
      type: http
      scheme: bearer
      bearerFormat: JWT